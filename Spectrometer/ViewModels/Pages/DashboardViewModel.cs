using Spectrometer.Services;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Timers;
using Wpf.Ui.Appearance;

namespace Spectrometer.ViewModels.Pages;

public partial class DashboardViewModel : ObservableObject
{
    // ------------------------------------------------------------------------------------------------
    // Public Fields
    //   Backing fields automatically generated by CommunityToolkit.Mvvm
    // ------------------------------------------------------------------------------------------------
    #region Public Fields

    [ObservableProperty]
    private bool _isLoading;

    // ------------------------------------------------------------------------------------------------
    // Motherboard

    [ObservableProperty]
    private string _mbName = string.Empty;

    // ------------------------------------------------------------------------------------------------
    // CPU

    [ObservableProperty]
    private string _cpuImagePath = string.Empty;

    [ObservableProperty]
    private string _cpuName = string.Empty;

    [ObservableProperty]
    private float _cpuTemp;

    [ObservableProperty]
    private float _cpuUsage;

    [ObservableProperty]
    private float _cpuPower;

    [ObservableProperty]
    private float _cpuPowerMax;

    // ------------------------------------------------------------------------------------------------
    // GPU

    [ObservableProperty]
    private string _gpuImagePath = string.Empty;

    [ObservableProperty]
    private string _gpuName = string.Empty;

    [ObservableProperty]
    private float _gpuTemp;

    [ObservableProperty]
    private float _gpuUsage;

    [ObservableProperty]
    private float _gpuPower;

    [ObservableProperty]
    private float _gpuPowerMax;

    // ------------------------------------------------------------------------------------------------
    // Memory

    [ObservableProperty]
    private string _memoryUsageDetails = string.Empty;

    [ObservableProperty]
    private double _memoryUsageGb;

    [ObservableProperty]
    private double _memoryTotalGb;
    #endregion

    // ------------------------------------------------------------------------------------------------
    // Private Fields
    // ------------------------------------------------------------------------------------------------

    private HardwareMonitorService? _hardwareMonitorService;

    private readonly System.Timers.Timer _timer;
    private void OnTimerElapsed(object? sender, ElapsedEventArgs e) => PollSensors();

    private readonly int _defaultPollingInterval = 1750; // Default polling interval in milliseconds

    // ------------------------------------------------------------------------------------------------
    // Constructor + Events
    // ------------------------------------------------------------------------------------------------

    // ------------------------------------------------------------------------------------------------
    /// <summary>
    /// 
    /// </summary>
    public DashboardViewModel()
    {
        _timer = new System.Timers.Timer(_defaultPollingInterval); // TODO: Make this a user setting
        _timer.Elapsed += OnTimerElapsed;
        InitializeAsync();
    }

    // ------------------------------------------------------------------------------------------------
    /// <summary>
    /// 
    /// </summary>
    private async void InitializeAsync()
    {
        IsLoading = true;
        await Task.Run(() => _hardwareMonitorService = new HardwareMonitorService());

        PollSensors(); // run once before starting timer to get initial values
        IsLoading = false;

        _timer.Start();

        //
        // Calculate CPU + GPU manufacturer logo paths
        //
        if (ApplicationThemeManager.GetAppTheme() == ApplicationTheme.Dark) // dark mode -- use white logo
        {
            // CPU
            if (CpuName.Contains("intel", StringComparison.CurrentCultureIgnoreCase))
                CpuImagePath = "pack://application:,,,/Assets/intel-logo-white.png";
            else if (CpuName.Contains("amd", StringComparison.CurrentCultureIgnoreCase) || CpuName.Contains("ryzen", StringComparison.CurrentCultureIgnoreCase))
                CpuImagePath = "pack://application:,,,/Assets/amd-logo-white.png";

            // GPU
            if (GpuName.Contains("nvidia", StringComparison.CurrentCultureIgnoreCase) || GpuName.Contains("geforce", StringComparison.CurrentCultureIgnoreCase))
                GpuImagePath = "pack://application:,,,/Assets/nvidia-logo-white.png";
            else if (GpuName.Contains("amd", StringComparison.CurrentCultureIgnoreCase) || GpuName.Contains("radeon", StringComparison.CurrentCultureIgnoreCase))
                GpuImagePath = "pack://application:,,,/Assets/amd-logo-white.png";
            else if (GpuName.Contains("intel", StringComparison.CurrentCultureIgnoreCase))
                GpuImagePath = "pack://application:,,,/Assets/intel-logo-white.png";
        }
        else // dark mode -- use black logo
        {
            // CPU
            if (CpuName.Contains("intel", StringComparison.CurrentCultureIgnoreCase))
                CpuImagePath = "pack://application:,,,/Assets/intel-logo-black.png";
            else if (CpuName.Contains("amd", StringComparison.CurrentCultureIgnoreCase) || CpuName.Contains("ryzen", StringComparison.CurrentCultureIgnoreCase))
                CpuImagePath = "pack://application:,,,/Assets/amd-logo-black.png";

            // GPU
            if (GpuName.Contains("nvidia", StringComparison.CurrentCultureIgnoreCase) || GpuName.Contains("geforce", StringComparison.CurrentCultureIgnoreCase))
                GpuImagePath = "pack://application:,,,/Assets/nvidia-logo-black.png";
            else if (GpuName.Contains("amd", StringComparison.CurrentCultureIgnoreCase) || GpuName.Contains("radeon", StringComparison.CurrentCultureIgnoreCase))
                GpuImagePath = "pack://application:,,,/Assets/amd-logo-black.png";
            else if (GpuName.Contains("intel", StringComparison.CurrentCultureIgnoreCase))
                GpuImagePath = "pack://application:,,,/Assets/intel-logo-black.png";
        }
    }

    // ------------------------------------------------------------------------------------------------
    /// <summary>
    /// 
    /// </summary>
    private void PollSensors()
    {
        if (_hardwareMonitorService == null)
            return;

        try
        {
            _hardwareMonitorService.Update();

            MbName = _hardwareMonitorService.GetMotherboardName();

            CpuName = _hardwareMonitorService.GetCpuName();
            CpuTemp = _hardwareMonitorService.GetCpuTemp();
            CpuUsage = _hardwareMonitorService.GetCpuUsage();
            CpuPower = _hardwareMonitorService.GetCpuPowerCurrent();
            CpuPowerMax = _hardwareMonitorService.GetCpuPowerMax();

            GpuName = _hardwareMonitorService.GetGpuName();
            GpuTemp = _hardwareMonitorService.GetGpuTemp();
            GpuUsage = _hardwareMonitorService.GetGpuUsage();
            GpuPower = _hardwareMonitorService.GetGpuPowerCurrent();
            //GpuPowerMax = _hardwareMonitorService.GetGpuPowerMax();

            MemoryUsageGb = _hardwareMonitorService.GetMemoryUsageGb();
            MemoryTotalGb = _hardwareMonitorService.GetMemoryTotalGb();
            float usedMemoryPercent = _hardwareMonitorService.GetMemoryUsagePercent();
            MemoryUsageDetails = $"{usedMemoryPercent:F0}% ({MemoryUsageGb:F1} GB / {MemoryTotalGb:F1} GB)";
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error polling sensors: {ex.Message}");
        }
    }

    // ------------------------------------------------------------------------------------------------
    // Dispose
    // ------------------------------------------------------------------------------------------------

    public void Dispose()
    {
        _timer?.Dispose();
        _hardwareMonitorService?.Dispose();
    }
}
